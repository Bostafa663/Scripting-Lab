### **Description of Python Files**

#### **1. `task.py`**
- **Purpose**: Searches for a specific file across multiple drives (`C:\\`, `E:\\`, `F:\\`).
- **Functionality**:
  - Prompts the user to input a filename to search.
  - Iterates through the specified drives and uses `os.walk()` to search for the file.
  - If the file is found, it prints the full path of the file.
  - If the file is not found, it displays a "file not found" message.
- **Key Features**:
  - Cross-drive file search.
  - Uses `os.walk()` for directory traversal.

---

#### **2. `Day3.py`**
- **Purpose**: A simple list management program.
- **Functionality**:
  - Allows the user to:
    1. Add items to a list.
    2. Remove items from the list.
    3. Display all items in the list.
    4. Clear the entire list.
    5. Exit the program.
  - Uses a `while` loop to keep the program running until the user chooses to exit.
- **Key Features**:
  - Basic CRUD (Create, Read, Update, Delete) operations on a list.
  - Simple menu-driven interface.

---

#### **3. `Lab1.py`**
- **Purpose**: A multi-functional program with various tasks encapsulated in functions.
- **Functionality**:
  - Provides a menu-driven interface to perform the following tasks:
    1. **Open Facebook in Chrome**: Opens Facebook in the default web browser.
    2. **Create a Directory and Write to a File**: Creates a directory and writes a simple text file.
    3. **Print a Star Pattern**: Prints a star pattern based on user input.
    4. **Check if a Number is Prime**: Checks if a user-provided number is prime.
    5. **String and List Operations**: Demonstrates string formatting and list/tuple manipulation.
    6. **Exit**: Exits the program.
- **Key Features**:
  - Modular design with separate functions for each task.
  - User-friendly menu interface.
  - Demonstrates file handling, string formatting, and basic algorithms.

---

#### **4. `Day3_ClearCode.py`**
- **Purpose**: A cleaner and more organized version of `Day3.py`.
- **Functionality**:
  - Similar to `Day3.py`, it allows the user to manage a list with options to:
    1. Add items.
    2. Remove items.
    3. Display items.
    4. Clear the list.
    5. Exit the program.
- **Key Improvements**:
  - Better code organization and readability.
  - Enhanced user feedback with descriptive messages.
  - Error handling for invalid inputs.

---

### **Summary**
- **`task.py`**: Searches for a file across multiple drives.
- **`Day3.py`**: A simple list management program.
- **`Lab1.py`**: A multi-functional program with various tasks.
- **`Day3_ClearCode.py`**: A cleaner and more organized version of `Day3.py`.

Each file serves a distinct purpose and demonstrates different aspects of Python programming, including file handling, list manipulation, user input, and modular programming.

-