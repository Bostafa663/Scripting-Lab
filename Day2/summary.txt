

### **Description of C Files**

#### **1. `Day2.c`**
- **Purpose**: A program to calculate and manage employee salaries, including tax deductions and net salary calculations.
- **Functionality**:
  - Prompts the user to input employee details (name, hours worked, hourly rate).
  - Calculates:
    - **Basic Salary**: `hours worked * hourly rate`.
    - **Tax**: Based on salary ranges using a tax calculation function.
    - **Net Salary**: `Basic Salary + Incentives (52% of Basic Salary) - Tax`.
  - Saves employee data (name, hours worked, gross salary, tax, and net salary) to a file (`file3.txt`).
  - Handles errors for out-of-range salaries.
- **Key Features**:
  - Uses a `struct` to store employee details.
  - Implements tax calculation logic based on salary brackets.
  - Saves data to a file for persistence.
  - Provides a loop to allow multiple employee entries until the user chooses to exit.

---

#### **2. `Day2_ClearCode.c`**
- **Purpose**: A cleaner and more organized version of `Day2.c` with enhanced functionality.
- **Functionality**:
  - Provides a menu-driven interface to:
    1. **Add Employee**: Input employee details (name, hours worked, hourly rate) and calculate basic salary, incentives, tax, and net salary.
    2. **Display Employees**: Show all stored employee details.
    3. **Save to File**: Save employee data to a file (`employees.txt`).
    4. **Load from File**: Load employee data from a file.
    5. **Exit**: Exit the program.
  - Uses a `struct` to store employee details and an array to manage multiple employees.
  - Implements tax calculation logic similar to `Day2.c`.
  - Handles file operations for saving and loading employee data.
- **Key Improvements**:
  - Modular design with separate functions for each task.
  - Better error handling and input validation.
  - Enhanced readability and organization with comments and consistent formatting.
  - Supports multiple employees and file-based data persistence.

---

### **Comparison of `Day2.c` and `Day2_ClearCode.c`**
| Feature                     | `Day2.c`                                    | `Day2_ClearCode.c`                        |
|-----------------------------|---------------------------------------------|-------------------------------------------|
| **Code Organization**       | Less modular, all logic in `main()`.        | Modular with separate functions for tasks.|
| **Readability**             | Low (lacks comments, inconsistent naming).  | High (uses comments and clear variable names).|
| **Error Handling**          | Basic error handling for out-of-range salaries. | Better error handling and input validation. |
| **File Operations**         | Saves data to a file (`file3.txt`).         | Supports saving and loading data from a file (`employees.txt`). |
| **Employee Management**     | Handles one employee at a time.             | Supports multiple employees using an array. |
| **Functionality**           | Basic salary, tax, and net salary calculation. | Enhanced functionality with incentives, file persistence, and a menu-driven interface. |

---

### **Summary**
- **`Day2.c`**: A functional program for calculating employee salaries and saving data to a file. It lacks modularity and has limited features.
- **`Day2_ClearCode.c`**: A cleaner, more organized, and feature-rich version of `Day2.c`. It supports multiple employees, file-based data persistence, and a user-friendly menu interface.

Both programs demonstrate C programming concepts such as `structs`, file handling, loops, conditionals, and functions. However, `Day2_ClearCode.c` is the preferred version due to its clarity, modularity, and enhanced functionality.

